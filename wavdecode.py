from argparse import ArgumentParser as ap
from pylab import *
from scipy.io import wavfile
import os

parser = ap(
        description='convert single-period .wav files to C array'
        )
parser.add_argument(
        '-d', '--dir',
        help='the directory containing the .wav files to convert',
        default='.'
        )
parser.add_argument(
        '-f', '--fmt',
        help='format of the data',
        choices=['MYFLT', 'int16_t', 'double'],
        default='MYFLT'
        )
parser.add_argument(
        '-o', '--outfile',
        help='name of the header file to generate',
        default='wt.h'
        )
parser.add_argument(
        '--origin',
        default=''
        )
args = parser.parse_args()

path = './wav/AKWF_sinharm'
hdrname = ''.join(['_', args.outfile.upper().replace('.', '_'), '_INCLUDED_'])

with open(args.outfile, 'w') as hdr:
    hdr.write('/**\n')
    hdr.write('\\file {f}\n'.format(f=args.outfile))
    hdr.write('\\brief wavetable oscillator data header\n')
    hdr.write('\n')
    hdr.write('\\details\n')
    hdr.write('generated by `wavdecode.py` script using open source single-period wav files\n')
    hdr.write('**/\n')
    hdr.write('#ifndef {hname}\n'.format(hname=hdrname))
    hdr.write('#define {hname}\n'.format(hname=hdrname))
    hdr.write('\n')

    files = [f for f in os.listdir(path) if '.wav' in f]
    tables = []
    for i,f in enumerate(files):
        print f
        tables.append(''.join(['wt', str(i)]))
        fs, samps = wavfile.read('/'.join([path, f]))
        n = samps.shape[0]
        if i == 0:
            hdr.write('const size_t wt_siz = {};\n'.format(n))
            hdr.write('const size_t wt_n = {};\n\n'.format(len(files)))
        if args.fmt in ['MYFLT', 'double', 'float']:
            samps = samps/2.**15
        hdr.write('static const {fmt} {table}[{n}] = '.format(fmt=args.fmt, table=tables[i], n=n))
        hdr.write('{\n\t')
        for samp in samps:
            hdr.write('{samp}, '.format(samp=samp))
        hdr.write('\n};\n\n')

    hdr.write('const {fmt} *wt[{n}] = '.format(fmt=args.fmt, n=len(files)))
    hdr.write('{\n\t')
    for t in tables:
        hdr.write('{table}, '.format(table=t))
    hdr.write('\n};\n\n')
    hdr.write('#endif /* {hname} */\n'.format(hname=hdrname))
